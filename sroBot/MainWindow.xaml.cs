using SilkroadSecurityApi;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using log4net;
using System.Runtime.InteropServices;
using System.Globalization;
using sroBot.SROData.pk2;

namespace sroBot
{

    class TreeViewLineConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            TreeViewItem item = (TreeViewItem)value;
            if (item == null) return null;
            ItemsControl ic = ItemsControl.ItemsControlFromItemContainer(item);
            if (ic == null) return null;

            return ic.ItemContainerGenerator.IndexFromContainer(item) == ic.Items.Count - 1;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return false;
        }
    }

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public static String ExecutingPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
        private static ILog log = LogManager.GetLogger(typeof(MainWindow));

        public static bool WillBeClosed = false;

        public static SROBot.Bot CurBot = null;
        private Hardcodet.Wpf.TaskbarNotification.TaskbarIcon tbIcon = new Hardcodet.Wpf.TaskbarNotification.TaskbarIcon();

        public MainWindow()
        {
            InitializeComponent();

            this.StateChanged += (s, e) =>
            {
                if (this.WindowState == WindowState.Minimized)
                {
                    this.Hide();
                }
            };

            tbIcon.TrayPopup = new GUI.TaskbarIcon.TrayPopup();
            //tbIcon.ToolTip = new GUI.TaskbarIcon.TrayTooltip();
            tbIcon.TrayMouseDoubleClick += (s, e) =>
            {
                this.Show();
                this.Topmost = true;
                if (this.WindowState == WindowState.Minimized)
                    this.WindowState = WindowState.Normal;
                this.Activate();
                this.Focus();
                this.Topmost = false;
            };

            var logsDir = System.IO.Path.Combine(ExecutingPath, "logs");
            if (!Directory.Exists(logsDir)) Directory.CreateDirectory(logsDir);

            var logConfig = System.IO.Path.Combine(ExecutingPath, "log.config.xml");
            if (File.Exists(logConfig)) log4net.Config.XmlConfigurator.Configure(new FileInfo(logConfig));
            else log4net.Config.XmlConfigurator.Configure(new MemoryStream(Encoding.Unicode.GetBytes(sroBot.Properties.Resources.log_config ?? "")));

            Loaded += MainWindow_Loaded;
            Closing += MainWindow_Closing;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            MobInfos.Load();
            ItemInfos.Load();
            SkillInfos.Load();
            SROData.MagicOptions.Load();
            SROData.Portals.Load();
            SROData.NPCs.Load();
            SROServer.Server.Load();
            SROData.ExpPoints.Load();

            tbIcon.ToolTipText = System.IO.Path.GetFileName(ExecutingPath) + "\r\n" + string.Join("\r\n", SROServer.Server.Available.First().Bots.Select(b => "  - " + b.CharName));

            foreach (var s in SROServer.Server.Available)
            {
                Array.ForEach(s.GetBots(), b =>
                {
                    b.Disconnected += bot_Disconnected;
                    b.ConnectedFirstTime += bot_Connected;
                    b.Reconnected += bot_Connected;
                });
            }

            App.Current.Dispatcher.Invoke(() => guiTreeview_bots.ItemsSource = SROServer.Server.Available);
        }

        private void bot_Connected(object sender, object arg)
        {
            var bot = sender as SROBot.Bot;
            if (bot == null) return;

            try
            {
                if (!bot.ConnectionTimes.Any() || bot.ConnectionTimes.Last().Type == SROBot.Bot.ConnectionInfo.CONNECTION_TYPE.DISCONNECTED)
                {
                    tbIcon.HideBalloonTip();
                    tbIcon.ShowBalloonTip("Connected", bot.CharName + " connected!", Hardcodet.Wpf.TaskbarNotification.BalloonIcon.Info);

                    if (bot.Config.Training.UseLevelDependentTrainplace)
                    {
                        bot.Config.TrainPlace.LevelUp(bot.Char.Level);
                    }
                }
            }
            catch { }
        }

        private void bot_Disconnected(object sender, object arg)
        {
            var bot = sender as SROBot.Bot;
            if (bot == null) return;

            try
            {
                if (bot.ConnectionTimes.Any() && bot.ConnectionTimes.Last().Type == SROBot.Bot.ConnectionInfo.CONNECTION_TYPE.CONNECTED)
                {
                    tbIcon.HideBalloonTip();
                    tbIcon.ShowBalloonTip("Disconnected", bot.CharName + " disconnected!", Hardcodet.Wpf.TaskbarNotification.BalloonIcon.Error);
                }
            }
            catch { }
        }

        void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (MessageBox.Show("Are you sure to close this window?", "Closing ..", MessageBoxButton.YesNo) != MessageBoxResult.Yes)
            {
                e.Cancel = true;
                return;
            }

            WillBeClosed = true;

            foreach (var server in SROServer.Server.Available)
            {
                foreach (var bot in server.GetBots())
                {
                    bot.Disconnected -= bot_Disconnected;
                    bot.ConnectedFirstTime -= bot_Connected;
                    bot.Reconnected -= bot_Connected;

                    bot.Config.Save();

                    bot.AutoReconnect = false;
                    if (bot.Proxy == null) continue;
                    bot.Proxy.Close();
                }
            }
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            var dlg = new DlgPickfilter();
            dlg.Show();
        }

        private void guiListbox_items_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
        }

        public static SROData.pk2.pk2Reader reader;

        private void guiBtn_parsePk2_Click(object sender, RoutedEventArgs e)
        {
            var mediapk2File = @"C:\sroEurope\alchemy\Media.pk2";
            reader = new SROData.pk2.pk2Reader(mediapk2File);
            //reader = new SROData.pk2.pk2Reader(@"C:\sroEpic\Media.pk2");
            //reader = new SROData.pk2.pk2Reader(@"C:\sroDemon\Media.pk2");
            //reader = new SROData.pk2.pk2Reader(@"C:\sroDicover\Media.pk2");
            //reader = new SROData.pk2.pk2Reader(@"C:\sroAtomix\Media.pk2");
            //reader = new pk2Reader(@"D:\workspace\sro\Media.pk2");

            var buf = reader.getFile("sv.t");

            var bf = new Blowfish();
            bf.Initialize(Encoding.ASCII.GetBytes("SILKROAD"));

            buf = bf.Decode(buf.Skip(4).Take(8).ToArray());

            int version;
            var str = Encoding.ASCII.GetString(buf, 0, 4).Replace('\0', ' ');
            Console.WriteLine(str);
            int.TryParse(str, out version);

            foreach (var file in reader.Files.Where(f => f.name.EndsWith(".txt")))
            {
                using (var sw = new StreamWriter(System.IO.Path.Combine(ExecutingPath, "pk2-stuff", file.name)))
                {
                    if (!file.name.Contains("enc"))
                    {
                        sw.Write(System.Text.Encoding.Default.GetString(reader.getFile(file.name).Where(b => b != 0).ToArray()));
                    }
                    else
                    {
                        sw.Write(System.Text.Encoding.Default.GetString(Textdata.decryptData(reader.getFile(file.name)).Where(b => b != 0).ToArray()));
                    }
                }
            }

            foreach (var img in reader.Files.Where(f => f.name.EndsWith(".ddj") &&
                (f.name.Contains("glow") ||
                 f.name.Contains("som") ||
                 f.name.Contains("sun") ||
                 f.name.Contains("seal") ||
                 f.name.Contains("rare") ||
                 f.name.Contains("effect") ||
                 f.name.Contains("circle")
                 )))
            {

                Console.WriteLine($"{img.parentFolder.name} -> {img.name} ({String.Join(", ", img.parentFolder.subfolders.Select(sf => sf.name))})");
            }

            {

                var ddj = reader.getFile("mall_avatar_m_sns_2013.ddj");
                var _dds = new DDSImage(ddj.Skip(20).ToArray());

                //_dds.images[0].Save(@"d:\test.bmp");
            }

            var textdata = new SROData.pk2.Textdata(reader.getFile("textdataname.txt"));
            textdata.GetItems(reader.getFile("itemdata.txt"));
            textdata.GetMobs(reader.getFile("characterdata.txt"));
            textdata.GetSkills(reader.getFile("skilldataenc.txt"));
            textdata.GetPortals(reader.getFile("teleportdata.txt"));
            textdata.GetMagicOptions(reader.getFile("magicoption.txt"));
            textdata.GetShops();
            textdata.Dispose();
            textdata.GetEpData();
            textdata.IP(reader.getFile("divisioninfo.txt"));
            textdata.Port(reader.getFile("gateport.txt"));

            Console.WriteLine("\nLoaded every entry!\nStarting to dump the data...");

            StreamWriter writer = new StreamWriter("parse_items.txt");
            writer.WriteLine("//ID,Type,Name,Level,Stack,Durability,tid1,tid2,tid3,tid4,tidgroup,icon");

            var mediapk2 = new PK2Reader.cPK2Reader(mediapk2File);

            foreach (var item in Media.Items.Values)
            {
                #region icons
                // generate BMP's
                var icon = "";
                if (item.Icon != "")
                {
                    //skill\china\sword_smash_d.ddj
                    icon = item.Icon.Split('\\').Last();

                    try
                    {
                        var execPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
                        var bmp = System.IO.Path.Combine(execPath, "itemimgs", item.Icon.Replace("\\", "_").Replace(".ddj", ".bmp"));

                        //if (File.Exists(bmp))
                        //{
                        //    File.Delete(bmp);
                        //}

                        if (!File.Exists(bmp))
                        {
                            var files = reader.getFiles(System.IO.Path.GetFileName(icon)).ToArray();
                            if (!files.Any()) continue;

                            var found = false;

                            foreach (var file in files)
                            {
                                var iconParentFolder = item.Icon.Split('\\').Reverse().Skip(1).FirstOrDefault();

                                if (string.Equals(iconParentFolder, file.parentFolder.name, StringComparison.OrdinalIgnoreCase))
                                {
                                    //var _tmp = reader.getFile(file);
                                    var _tmp = mediapk2.Get_file("\\icon\\" + item.Icon);
                                    var ddj = _tmp.Skip(20).ToArray();

                                    if ((char)_tmp[0] == 'D')
                                    {
                                        ddj = _tmp.ToArray();
                                    }

                                    try
                                    {
                                        //var _dds = new DDSImage(ddj.ToArray());
                                        //_dds.images[0].Save(bmp);

                                        //Console.WriteLine("saving .. " + bmp + " " + ddj.Length.ToString());
                                        if (ddj.Length == 2871) continue;

                                        System.Drawing.Bitmap sectorImg;
                                        using (var s = new MemoryStream(ddj))
                                        {
                                            var format = FreeImageAPI.FREE_IMAGE_FORMAT.FIF_DDS;
                                            var sector = FreeImageAPI.FreeImage.LoadFromStream(s, FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.DEFAULT, ref format);
                                            sectorImg = FreeImageAPI.FreeImage.GetBitmap(sector);
                                            FreeImageAPI.FreeImage.UnloadEx(ref sector);
                                        }

                                        sectorImg.Save(bmp);
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine($"{icon}: Konnte BMP nicht erstellen: {ex.Message} ({file.size} bytes)");

                                        Thread.Sleep(100);

                                        var filename = System.IO.Path.GetFileName(bmp);

                                        if (filename == "cos_cos_p_gorilla.bmp" ||
                                            filename == "cos_fire_spirit.bmp" ||
                                            filename == "cos_item_cos_p_frilled_lizard_scroll.bmp" ||
                                            filename == "item_Avatar_mall_avatar_m_assasin_creed.bmp" ||
                                            filename == "item_etc_winter_event_02.bmp"
                                            )
                                        {
                                            Console.WriteLine("!!");
                                        }

                                        try
                                        {
                                            Console.WriteLine($"{icon}: try another class");

                                            var ndds = new DdsImageParser(ddj.ToArray());

                                            ndds.BitmapImage.Save(System.IO.Path.Combine(execPath, "itemimgs_n", System.IO.Path.GetFileName(bmp)));

                                            Thread.Sleep(100);

                                            Console.WriteLine("DONE!");
                                        }
                                        catch (Exception exx)
                                        {
                                            Thread.Sleep(100);

                                            Console.WriteLine($"{icon}: IMMER NOCHT NICHT: {exx.Message} ({file.size} bytes)");
                                        }

                                        Thread.Sleep(100);

                                        Console.WriteLine("-------------------");
                                        Console.WriteLine();
                                        Console.WriteLine();
                                    }

                                    found = true;
                                    break;
                                }
                            }

                            if (!found)
                            {
                                Console.WriteLine($"{icon}: KEIN ICON GEFUNDEN?!?!?!?");
                            }
                        }

                        icon = System.IO.Path.GetFileName(bmp); // use an CONVERTER instead absolute path !!
                    }
                    catch (Exception ex)
                    {
                        //Console.WriteLine("err getting bmp from skill {0}/{1}/{2}! {3} => {4}", skill.Name, skill.Pk2Name, skillIcon, ex.Message, ex.StackTrace);
                    }
                }
                #endregion

                writer.WriteLine("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11}",
                                    item.Pk2Id,
                                    item.Pk2Name,
                                    item.Name, 
                                    item.Level, 
                                    item.StackSize, 
                                    item.Durability, 
                                    item.TypeId1, 
                                    item.TypeId2, 
                                    item.TypeId3, 
                                    item.TypeId4, 
                                    item.TypeIdGroup, 
                                    icon
                                    );
            }
            writer.Close();

            writer = new StreamWriter("parse_mobs.txt");
            writer.WriteLine("//ID,Type,Name,Level,Hp,tid1,tid2,tid3,tid4");
            foreach (var mob in Media.Mobs.Values)
            {
                writer.WriteLine($"{mob.Pk2Id},{mob.Pk2Name},{mob.Name},{mob.Level},{mob.HP},{mob.TypeId1},{mob.TypeId2},{mob.TypeId3},{mob.TypeId4}");
            }
            writer.Close();

            writer = new StreamWriter("parse_skills.txt");
            writer.WriteLine("//ID,Type,Name,reqMastery1Lvl,CastTime,Cooldown,Duration,MP,reqMastery1,Skillgroup,icon,spNeeded,cooldownid,needstarget,weapToUse,reqItem1#reqItem2#reqItemX,weapType1,weapType2,reqMastery2,reqMastery2Lvl,reqStr,reqInt,reqSkill1,reqSkill2,reqSkill3,reqSkill1Lvl,reqSkill2Lvl,reqSkill3Lvl,skillId,skillGroupIdx");
            foreach (var skill in Media.Skills.Values)
            {
                // generate BMP's
                var converted = false;
                var skillIcon = "";
                if (skill.Icon != "")
                {
                    //skill\china\sword_smash_d.ddj
                    skillIcon = skill.Icon.Split('\\').Last();

                    if (skillIcon.IndexOf("GIGONGSUL_H", StringComparison.OrdinalIgnoreCase) >= 0)
                    {
                        Console.WriteLine("!!");
                    }

                    try
                    {
                        var execPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
                        var bmp = System.IO.Path.Combine(execPath, "skillimgs", System.IO.Path.GetFileNameWithoutExtension(skillIcon) + ".bmp");
                        if (!File.Exists(bmp))
                        {
                            //var ddj = reader.getFile(System.IO.Path.GetFileName(skillIcon));
                            //var _dds = new DDSImage(ddj.Skip(20).ToArray());
                            //_dds.images[0].Save(bmp);

                            //var _tmp = reader.getFile(System.IO.Path.GetFileName(skillIcon));
                            var _tmp = mediapk2.Get_file("\\icon\\" + skill.Icon);
                            var ddj = _tmp.Skip(20).ToArray();

                            if ((char)_tmp[0] == 'D')
                            {
                                ddj = _tmp.ToArray();
                            }

                            //var ndds = new DdsImageParser(ddj.ToArray());
                            //ndds.BitmapImage.Save(bmp);

                            System.Drawing.Bitmap sectorImg;
                            using (var s = new MemoryStream(ddj))
                            {
                                var format = FreeImageAPI.FREE_IMAGE_FORMAT.FIF_DDS;
                                var sector = FreeImageAPI.FreeImage.LoadFromStream(s, FreeImageAPI.FREE_IMAGE_LOAD_FLAGS.DEFAULT, ref format);
                                sectorImg = FreeImageAPI.FreeImage.GetBitmap(sector);
                                FreeImageAPI.FreeImage.UnloadEx(ref sector);
                            }

                            sectorImg.Save(bmp);
                        }
                        converted = true;
                        skillIcon = System.IO.Path.GetFileName(bmp); // use an CONVERTER instead absolute path !!
                    }
                    catch (Exception ex)
                    {
                        //Console.WriteLine("err getting bmp from skill {0}/{1}/{2}! {3} => {4}", skill.Name, skill.Pk2Name, skillIcon, ex.Message, ex.StackTrace);
                    }
                }
                
                var icon = converted ? skillIcon : "";

                var sb = new StringBuilder();

                sb.Append(skill.Pk2Id); sb.Append(",");
                sb.Append(skill.Pk2Name); sb.Append(",");
                sb.Append(skill.Name); sb.Append(",");
                sb.Append(skill.RequiredMastery1Level); sb.Append(",");
                sb.Append(skill.CastTime); sb.Append(",");
                sb.Append(skill.Cooldown); sb.Append(",");
                sb.Append(skill.Duration); sb.Append(",");
                sb.Append(skill.MP); sb.Append(",");
                sb.Append(skill.RequiredMastery1); sb.Append(",");
                sb.Append(skill.SkillGroup); sb.Append(",");
                sb.Append(icon); sb.Append(",");
                sb.Append(skill.SPNeeded); sb.Append(",");
                sb.Append(skill.CooldownId); sb.Append(",");
                sb.Append(skill.NeedsTarget); sb.Append(",");
                sb.Append(skill.WeaponToUse); sb.Append(",");
                sb.Append(string.Join("#", skill.RequiredItems)); sb.Append(",");
                sb.Append(skill.WeaponType1); sb.Append(",");
                sb.Append(skill.WeaponType2); sb.Append(",");
                sb.Append(skill.RequiredMastery2); sb.Append(",");
                sb.Append(skill.RequiredMastery2Level); sb.Append(",");
                sb.Append(skill.RequiredStr); sb.Append(",");
                sb.Append(skill.RequiredInt); sb.Append(",");
                sb.Append(skill.RequiredSkill1); sb.Append(",");
                sb.Append(skill.RequiredSkill2); sb.Append(",");
                sb.Append(skill.RequiredSkill3); sb.Append(",");
                sb.Append(skill.RequiredSkill1Level); sb.Append(",");
                sb.Append(skill.RequiredSkill2Level); sb.Append(",");
                sb.Append(skill.RequiredSkill3Level); sb.Append(",");
                sb.Append(skill.SkillId); sb.Append(",");
                sb.Append(skill.SkillGroupIndex); sb.Append(",");

                writer.WriteLine(sb.ToString());
            }

            writer.Close();

            writer = new StreamWriter("parse_magicoptions.txt");
            writer.WriteLine("//ID,Type,Name,degree,forWeap,forShield,forArmor,forAcc,forHead,forChest,forLegs,forNeck,forEarring,forRing");
            foreach (var moption in Media.MagicOptions.Values)
            {
                writer.WriteLine("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13}", moption.Pk2Id, moption.Pk2Name, moption.Name, moption.Degree, moption.ForWeapon, moption.ForShield, moption.ForArmor, moption.ForAccessory, moption.ForHead, moption.ForChest, moption.ForLegs, moption.ForNecklace, moption.ForEarring, moption.ForRing);
            }
            writer.Close();

            writer = new StreamWriter("parse_portals.txt");
            writer.WriteLine("//ID,Type,name,model,teleport ids ...");
            foreach (var portal in Media.Portals.Values)
            {
                writer.WriteLine("{0},{1},{2},{3},{4}", portal.Pk2Id, portal.Pk2Name, portal.Name, portal.Pk2Model, String.Join(",", portal.Links));
            }
            writer.Close();

            //writer = new StreamWriter("parse_shops.txt");
            //writer.WriteLine("//model,type,name");
            //foreach (var npc in data.NPCs.Current)
            //{
            //    writer.WriteLine("{0},{1},{2}", npc.Model, npc.Type, npc.Name);
            //}
            //writer.Close();

            writer = new StreamWriter("parse_goods.txt");
            writer.WriteLine("//npcmodel,tabid,tabtype,goods...");
            foreach (var npc in SROData.NPCs.Current)
            {
                foreach (var tab in npc.Tabs)
                {
                    writer.WriteLine("{0},{1},{2}", npc.Model, tab.TabType, String.Join(", ", tab.ItemModels.OrderBy(i => i.IndexOfTab).Select(i => i.Model + "+" + i.Plus + ";" + i.Price)));
                }
            }
            writer.Close();

            writer = new StreamWriter("parse_epsp.txt");
            writer.WriteLine("//level,exp,masteryUpSp");
            foreach (var exp in SROData.ExpPoints.AtLevel)
            {
                writer.WriteLine("{0},{1},{2}", exp.Key, exp.Value, Mastery.SpAtLevel[(byte)exp.Key]);
            }
            writer.Close();


            //Config.guiEvents.Info("Parsing the Media.pk2 finish !", Color.DeepSkyBlue);
            Console.WriteLine("parsing done");
        }

        private void guiListbox_skills_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var listbox = sender as ListBox;
            if (listbox == null) return;
            var selItem = listbox.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Config.Skilling.AutomaticChooseSkills) return;

            bot.Config.SetImbue(skill);
        }

        private void guiBtn_useAsAttack_Click(object sender, RoutedEventArgs e)
        {
            var selItem = guiListbox_skills.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Config.Skilling.AutomaticChooseSkills) return;

            bot.Config.AddAttackingSkill(skill);
        }

        private void guiListbox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var listbox = sender as ListBox;
            if (listbox == null) return;
            var selItem = listbox.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Config.Skilling.AutomaticChooseSkills) return;

            bot.Config.RemoveAttackingSkill(skill);
        }

        private void guiBtn_useAsBuff_Click(object sender, RoutedEventArgs e)
        {
            var selItem = guiListbox_skills.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Config.Skilling.AutomaticChooseSkills) return;

            bot.Config.AddBuffingSkill(skill);
        }

        private void guiListbox_bufSkills_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var listbox = sender as ListBox;
            if (listbox == null) return;
            var selItem = listbox.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Config.Skilling.AutomaticChooseSkills) return;

            bot.Config.RemoveBuffingSkill(skill);
        }

        private void guiListbox_activeBuffs_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var listbox = sender as ListBox;
            if (listbox == null) return;
            var selItem = listbox.SelectedItem;
            if (selItem == null) return;
            var skill = selItem as SkillInfo;
            if (skill == null) return;
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            // TODO: try to remvoe that buff !!
        }

        private void guiCheckbx_logPackets_Click(object sender, RoutedEventArgs e)
        {
            var chkbx = sender as CheckBox;
            if (chkbx == null) return;

            if (CurBot == null) return;
            CurBot.Proxy.LogPackets = chkbx.IsChecked == true;
        }

        private void button_Click(object sender, RoutedEventArgs e)
        {
            SROBot.Actions.Teleport(Convert.ToUInt32(textBox.Text), Convert.ToByte(textBox1.Text), Convert.ToUInt32(textBox2.Text), CurBot);
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            if (CurBot == null) return;

            foreach (var portal in CurBot.Spawns.Gates.GetAll())
            {
                Console.WriteLine("portal found: {0}/{1} with id: {2} - can teleport to:", portal.Type, portal.Name, portal.IngameId);
                foreach (var link in portal.Links)
                {
                    Console.WriteLine("  `-> {0} => {1}", link, SROData.Portals.GetByModel(link)?.Type);
                }
            }
        }

        private void button2_Click(object sender, RoutedEventArgs e)
        {
            var groupSpawnCnt = 4;
            var groupSpawnData = new byte[]
            {
                //0x73, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x07, 0x3F, 0x02, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x00, 0xE5, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x02, 0x00, 0x00, 0x00, 0x37, 0x0E, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0x09, 0x1A, 0x23, 0x00, 0x00, 0x00, 0x05, 0x01, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x4A, 0x7D, 0x02, 0x99, 0x66, 0x0D, 0xCC, 0xBE, 0x43, 0x7A, 0x46, 0xD5, 0xC2, 0x45, 0x6B, 0xC3, 0x44, 0x1C, 0x8B, 0x01, 0x01, 0x99, 0x66, 0x7D, 0x01, 0x96, 0xFF, 0x1B, 0x06, 0x01, 0x00, 0x00, 0x00, 0x33, 0x33, 0x53, 0x42, 0x00, 0x00, 0x25, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x03, 0x54, 0x0D, 0x00, 0x00, 0x07, 0x95, 0x05, 0x00, 0x4F, 0x0D, 0x00, 0x00, 0x8E, 0x71, 0x03, 0x00, 0x16, 0x05, 0x00, 0x00, 0xF8, 0x9C, 0x06, 0x00, 0x05, 0x00, 0x68, 0x75, 0x79, 0x6E, 0x68, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1A, 0x18, 0x00, 0x00, 0x80, 0x4B, 0x7D, 0x02, 0x99, 0x66, 0x0D, 0xCC, 0xBE, 0x43, 0x7A, 0x46, 0xD5, 0xC2, 0x45, 0x6B, 0xC3, 0x44, 0xA0, 0x8A, 0x01, 0x01, 0x99, 0x66, 0xDC, 0x01, 0x96, 0xFF, 0x23, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x42, 0x00, 0x40, 0x4E, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x68, 0x75, 0x79, 0x6E, 0x68, 0x01, 0x00, 0xC1, 0x4A, 0x7D, 0x02, 0x48, 0x0F, 0x00, 0x00, 0x38, 0x90, 0x7E, 0x02, 0x99, 0x66, 0xE7, 0x60, 0x08, 0x44, 0x32, 0x8C, 0xD5, 0xC2, 0xA0, 0x4A, 0xAA, 0x44, 0x98, 0x61, 0x01, 0x01, 0x99, 0x66, 0x21, 0x02, 0x96, 0xFF, 0x52, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x41, 0x00, 0x00, 0x40, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x05, 0x00, 0x68, 0x75, 0x79, 0x6E, 0x68, 0x01, 0x00, 0xC1, 0x4A, 0x7D, 0x02, 0x0B, 0x08, 0x00, 0x00, 0xF6, 0x01, 0x00, 0x00, 0x99, 0x66, 0xAE, 0x87, 0xC4, 0x43, 0x92, 0x40, 0xD5, 0xC2, 0xEC, 0x09, 0xC3, 0x44, 0xB5, 0x40, 0x00, 0x01, 0x00, 0xB5, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x03, 0x01, 0x02, 0x0C, 0x11, 0x08, 0x00, 0x00, 0xFB, 0x01, 0x00, 0x00, 0x99, 0x66, 0x7B, 0x54, 0xDF, 0x43, 0x5B, 0x32, 0xD5, 0xC2, 0x3D, 0x1A, 0xC3, 0x44, 0xB5, 0x40, 0x00, 0x01, 0x00, 0xB5, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x03, 0x01, 0x02, 0x14, 0x23, 0x24, 0x00, 0x00, 0xFF, 0x02, 0x00, 0x00, 0x99, 0x66, 0x3D, 0xFA, 0x07, 0x44, 0xEE, 0x77, 0xD5, 0xC2, 0x85, 0xAB, 0xBF, 0x44, 0xB5, 0x40, 0x00, 0x01, 0x00, 0xB5, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x01, 0x11
                //0xF4, 0xA4, 0x00, 0x00, 0xE6, 0x89, 0xCF, 0x02, 0x99, 0x66, 0x00, 0x40, 0x8A, 0x44, 0xFF, 0x3F, 0xD4, 0xC2, 0x00, 0x00, 0x60, 0x44, 0x35, 0xAE, 0x00, 0x01, 0x00, 0x37, 0xAE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x42, 0x00, 0x00, 0x2F, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x01
                //0x77, 0x07, 0x00, 0x00, 0x44, 0x18, 0x00, 0x00, 0x6D, 0x08, 0x80, 0x98, 0x00, 0x00, 0x1A, 0x86, 0x98, 0x00, 0x00, 0x1A, 0x83, 0x98, 0x00, 0x00, 0x1A, 0x8C, 0x98, 0x00, 0x00, 0x1A, 0x89, 0x98, 0x00, 0x00, 0x1A, 0x8F, 0x98, 0x00, 0x00, 0x1A, 0x5C, 0x98, 0x00, 0x00, 0x1A, 0x6B, 0x98, 0x00, 0x00, 0x1A, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0xCE, 0x5E, 0x00, 0x00, 0x00, 0x54, 0x60, 0x00, 0x00, 0x00, 0x4A, 0x60, 0x00, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x0A, 0x00, 0xFB, 0xFA, 0x69, 0x02, 0x99, 0x66, 0x00, 0x80, 0x90, 0x44, 0x8F, 0x30, 0xD4, 0xC2, 0x00, 0x00, 0x38, 0x44, 0xC2, 0x31, 0x01, 0x01, 0x99, 0x66, 0x84, 0x04, 0x96, 0xFF, 0xE0, 0x02, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x01, 0x24, 0x15, 0x00, 0x00, 0xC5, 0x0D, 0x01, 0x00, 0x0A, 0x00, 0x53, 0x61, 0x6E, 0x64, 0x53, 0x6E, 0x69, 0x70, 0x33, 0x72, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x44, 0x72, 0x61, 0x6D, 0x61, 0x4D, 0x61, 0x6B, 0x65, 0x72, 0x73, 0x6B, 0x16, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0xBF, 0x02, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x24, 0x3A, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x6D, 0x07, 0x23, 0x99, 0x00, 0x00, 0x00, 0x2B, 0x99, 0x00, 0x00, 0x00, 0x26, 0x99, 0x00, 0x00, 0x00, 0x2D, 0x33, 0x00, 0x00, 0x07, 0x10, 0x33, 0x00, 0x00, 0x00, 0x34, 0x99, 0x00, 0x00, 0x00, 0xF6, 0x98, 0x00, 0x00, 0x00, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x17, 0xA2, 0x00, 0x00, 0x00, 0x07, 0xA2, 0x00, 0x00, 0x00, 0xD7, 0xAB, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x7F, 0xB3, 0x02, 0x99, 0x66, 0x00, 0x00, 0x7E, 0x44, 0x12, 0xF3, 0xD4, 0xC2, 0x00, 0x40, 0x5D, 0x44, 0xE4, 0x3F, 0x00, 0x01, 0x00, 0xE4, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x19, 0x42, 0x01, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0A, 0x00, 0x42, 0x6F, 0x72, 0x75, 0x74, 0x6F, 0x53, 0x61, 0x6D, 0x61, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x49, 0x74, 0x73, 0x58, 0x4F, 0x85, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x1D, 0x3A, 0x00, 0x00, 0x44, 0x19, 0x00, 0x00, 0x6D, 0x06, 0x13, 0x99, 0x00, 0x00, 0x0B, 0x19, 0x99, 0x00, 0x00, 0x0B, 0x14, 0x99, 0x00, 0x00, 0x0B, 0x1F, 0x99, 0x00, 0x00, 0x0B, 0x1C, 0x99, 0x00, 0x00, 0x0B, 0x22, 0x99, 0x00, 0x00, 0x0B, 0x05, 0x04, 0xD5, 0xAB, 0x00, 0x00, 0x00, 0x93, 0xA3, 0x00, 0x00, 0x00, 0xD3, 0xAB, 0x00, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x07, 0x00, 0x49, 0xDA, 0xB7, 0x02, 0x99, 0x66, 0x00, 0xE0, 0x83, 0x44, 0xD0, 0x2A, 0xD4, 0xC2, 0x00, 0x40, 0x28, 0x44, 0x50, 0xDB, 0x00, 0x01, 0x00, 0x50, 0xDB, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x05, 0x00, 0x5A, 0x45, 0x52, 0x47, 0x41, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x55, 0x6E, 0x69, 0x71, 0x75, 0x65, 0x4B, 0x49, 0x4C, 0x4C, 0x45, 0x52, 0xA4, 0x0F, 0x00, 0x00, 0x04, 0x00, 0x42, 0x4F, 0x53, 0x53, 0x00, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0xFF, 0x7F, 0x07, 0x00, 0x00, 0x33, 0x00, 0x00, 0x02, 0x6D, 0x07, 0x6C, 0x98, 0x00, 0x00, 0x09, 0x84, 0x98, 0x00, 0x00, 0x09, 0x81, 0x98, 0x00, 0x00, 0x09, 0x8A, 0x98, 0x00, 0x00, 0x09, 0x88, 0x98, 0x00, 0x00, 0x0A, 0x8D, 0x98, 0x00, 0x00, 0x09, 0x60, 0x98, 0x00, 0x00, 0x00, 0x05, 0x03, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x38, 0x98, 0x00, 0x00, 0x00, 0xC9, 0x64, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x16, 0xCF, 0x02, 0x99, 0x66, 0x00, 0x40, 0x8A, 0x44, 0xFF, 0x3F, 0xD4, 0xC2, 0x00, 0x00, 0x60, 0x44, 0x35, 0xAE, 0x01, 0x01, 0x99, 0x66, 0x52, 0x04, 0x96, 0xFF, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x01, 0x24, 0x15, 0x00, 0x00, 0x3A, 0x3B, 0x05, 0x00, 0x07, 0x00, 0x4D, 0x61, 0x52, 0x73, 0x48, 0x61, 0x4C, 0x00, 0x01, 0x00, 0x01, 0x00, 0xE6, 0x89, 0xCF, 0x02, 0x00, 0x06, 0x00, 0x06, 0x00, 0x44, 0x65, 0x6A, 0x61, 0x56, 0x75, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x78, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x07, 0xC4, 0x10, 0x00, 0x00, 0x07, 0x0C, 0x11, 0x00, 0x00, 0x07, 0xE8, 0x10, 0x00, 0x00, 0x07, 0x54, 0x11, 0x00, 0x00, 0x07, 0x30, 0x11, 0x00, 0x00, 0x07, 0x78, 0x11, 0x00, 0x00, 0x07, 0xAD, 0x00, 0x00, 0x00, 0x0A, 0x05, 0x02, 0xCA, 0x5E, 0x00, 0x00, 0x04, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x62, 0x39, 0xDE, 0x02, 0x99, 0x66, 0x00, 0x20, 0x97, 0x44, 0xD9, 0x08, 0xD4, 0xC2, 0x00, 0x80, 0x30, 0x44, 0x77, 0xD3, 0x01, 0x01, 0x99, 0x66, 0xB9, 0x04, 0x96, 0xFF, 0xC2, 0x02, 0x01, 0x00, 0x00, 0x00, 0x5C, 0x8F, 0x62, 0x42, 0x00, 0x00, 0x31, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x01, 0x1C, 0x05, 0x00, 0x00, 0x14, 0x4A, 0x05, 0x00, 0x06, 0x00, 0x44, 0x61, 0x6C, 0x6C, 0x61, 0x73, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x74, 0x07, 0x00, 0x00, 0x44, 0x1C, 0x00, 0x00, 0x6D, 0x08, 0x80, 0x98, 0x00, 0x00, 0x0F, 0x86, 0x98, 0x00, 0x00, 0x0F, 0x83, 0x98, 0x00, 0x00, 0x13, 0x8C, 0x98, 0x00, 0x00, 0x0F, 0x89, 0x98, 0x00, 0x00, 0x0F, 0x8F, 0x98, 0x00, 0x00, 0x0F, 0x5F, 0x98, 0x00, 0x00, 0x18, 0x6B, 0x98, 0x00, 0x00, 0x13, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0xE1, 0x72, 0x00, 0x00, 0x00, 0xCD, 0x64, 0x00, 0x00, 0x00, 0x93, 0xA3, 0x00, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x0A, 0x00, 0x27, 0x9C, 0xE6, 0x02, 0x99, 0x66, 0x40, 0xBE, 0x8F, 0x44, 0xF3, 0x36, 0xD4, 0xC2, 0x3F, 0x93, 0x2C, 0x44, 0x53, 0xC7, 0x01, 0x01, 0x99, 0x66, 0x7D, 0x04, 0x96, 0xFF, 0xB2, 0x02, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x1E, 0xC5, 0x42, 0x01, 0x00, 0x9A, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x02, 0x24, 0x15, 0x00, 0x00, 0x63, 0x07, 0x01, 0x00, 0x4C, 0xD5, 0x00, 0x00, 0x23, 0xC5, 0x02, 0x00, 0x09, 0x00, 0x78, 0x58, 0x46, 0x52, 0x4F, 0x53, 0x54, 0x58, 0x78, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x47, 0x65, 0x72, 0x6D, 0x61, 0x6E, 0x5F, 0x4D, 0x69, 0x67, 0x68, 0x74, 0x0B, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8C, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x83, 0x07, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x6D, 0x00, 0x05, 0x04, 0x64, 0x0B, 0x01, 0x00, 0x00, 0x66, 0x0B, 0x01, 0x00, 0x00, 0x62, 0x0B, 0x01, 0x00, 0x00, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x20, 0xB2, 0xE6, 0x02, 0x99, 0x66, 0x00, 0x40, 0x9D, 0x44, 0x5F, 0x97, 0xD3, 0xC2, 0x00, 0xC0, 0x26, 0x44, 0xEC, 0xDB, 0x01, 0x01, 0x99, 0x66, 0xEA, 0x04, 0x97, 0xFF, 0x9B, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x07, 0x00, 0x48, 0x61, 0x72, 0x6C, 0x65, 0x65, 0x6E, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x79, 0x0B, 0x01, 0x00, 0x63, 0xFE, 0x69, 0x02, 0x99, 0x66, 0x00, 0x40, 0x93, 0x44, 0x9C, 0x23, 0xD4, 0xC2, 0x00, 0xC0, 0x35, 0x44, 0x38, 0x26, 0x01, 0x01, 0x99, 0x66, 0x9A, 0x04, 0x96, 0xFF, 0xD7, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x01, 0x00, 0x9A, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x53, 0x61, 0x6E, 0x64, 0x53, 0x6E, 0x69, 0x70, 0x33, 0x72, 0x04, 0xFB, 0xFA, 0x69, 0x02, 0x79, 0x0B, 0x01, 0x00, 0xFA, 0x9B, 0xB3, 0x02, 0x99, 0x66, 0x00, 0xC0, 0x81, 0x44, 0x35, 0xBF, 0xD4, 0xC2, 0x00, 0x00, 0x5B, 0x44, 0x74, 0x6E, 0x01, 0x01, 0x99, 0x66, 0x0E, 0x04, 0x96, 0xFF, 0x6C, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x01, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x42, 0x6F, 0x72, 0x75, 0x74, 0x6F, 0x53, 0x61, 0x6D, 0x61, 0x04, 0xA2, 0x7F, 0xB3, 0x02, 0xF4, 0xA4, 0x00, 0x00, 0xE6, 0x89, 0xCF, 0x02, 0x99, 0x66, 0x00, 0x40, 0x8A, 0x44, 0xFF, 0x3F, 0xD4, 0xC2, 0x00, 0x00, 0x60, 0x44, 0x35, 0xAE, 0x00, 0x01, 0x00, 0x37, 0xAE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x42, 0x00, 0x00, 0x2F, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x45, 0x1D, 0x00, 0x00, 0x40, 0xAE, 0xE6, 0x02, 0x99, 0x66, 0x00, 0x80, 0x92, 0x44, 0xDA, 0x2D, 0xD4, 0xC2, 0x00, 0x00, 0x2A, 0x44, 0x3E, 0xC7, 0x01, 0x01, 0x99, 0x66, 0x94, 0x04, 0x96, 0xFF, 0xA8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x02, 0x80, 0xC0, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x08, 0x00, 0x69, 0x63, 0x68, 0x5F, 0x77, 0x61, 0x72, 0x73, 0x09, 0x00, 0x78, 0x58, 0x46, 0x52, 0x4F, 0x53, 0x54, 0x58, 0x78, 0x04, 0x27, 0x9C, 0xE6, 0x02, 0x98, 0xA9, 0x00, 0x00, 0x50, 0xAE, 0xE6, 0x02, 0x99, 0x66, 0x00, 0x00, 0x90, 0x44, 0x33, 0x36, 0xD4, 0xC2, 0x00, 0x40, 0x2A, 0x44, 0x3E, 0xC7, 0x01, 0x01, 0x99, 0x66, 0x80, 0x04, 0x96, 0xFF, 0xA9, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x42, 0x01, 0x80, 0xC0, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x07, 0x00, 0x42, 0x75, 0x54, 0x63, 0x48, 0x65, 0x52, 0x09, 0x00, 0x78, 0x58, 0x46, 0x52, 0x4F, 0x53, 0x54, 0x58, 0x78, 0x04, 0x00, 0x27, 0x9C, 0xE6, 0x02, 0x45, 0x1D, 0x00, 0x00, 0xB1, 0xB4, 0xE6, 0x02, 0x99, 0x66, 0x00, 0x60, 0x9E, 0x44, 0x81, 0x78, 0xD3, 0xC2, 0x00, 0x00, 0x21, 0x44, 0xE7, 0xDF, 0x01, 0x01, 0x99, 0x66, 0xF3, 0x04, 0x97, 0xFF, 0x84, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x0B, 0x00, 0x50, 0x65, 0x70, 0x73, 0x69, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x07, 0x00, 0x48, 0x61, 0x72, 0x6C, 0x65, 0x65, 0x6E, 0x04, 0x20, 0xB2, 0xE6, 0x02, 0x1C, 0xAA, 0x00, 0x00, 0xB2, 0xB4, 0xE6, 0x02, 0x99, 0x66, 0x00, 0x20, 0x9E, 0x44, 0x68, 0x85, 0xD3, 0xC2, 0x00, 0x00, 0x26, 0x44, 0x9A, 0xDB, 0x01, 0x01, 0x99, 0x66, 0xF1, 0x04, 0x97, 0xFF, 0x98, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x05, 0x00, 0x47, 0x72, 0x6F, 0x64, 0x64, 0x07, 0x00, 0x48, 0x61, 0x72, 0x6C, 0x65, 0x65, 0x6E, 0x04, 0x00, 0x20, 0xB2, 0xE6, 0x02, 0x0A, 0x08, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x99, 0x66, 0x33, 0x8B, 0x9D, 0x44, 0xF7, 0x9E, 0xD3, 0xC2, 0x9A, 0x39, 0x2E, 0x44, 0xB5, 0x80, 0x00, 0x01, 0x00, 0xB5, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x03, 0x01, 0x02, 0x03, 0x09, 0x08, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x99, 0x66, 0x33, 0x8B, 0x9D, 0x44, 0xFC, 0x9E, 0xD3, 0xC2, 0xC3, 0x35, 0x2E, 0x44, 0xB5, 0x80, 0x00, 0x01, 0x00, 0xB5, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x03, 0x01, 0x02, 0x03, 0x04, 0x08, 0x00, 0x00, 0x6A, 0x02, 0x00, 0x00, 0x99, 0x66, 0x71, 0x8D, 0x95, 0x44, 0x38, 0x03, 0xD4, 0xC2, 0x52, 0x58, 0x61, 0x44, 0xB5, 0x80, 0x00, 0x01, 0x00, 0xB5, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x03, 0x01, 0x02, 0x04
                //0x76, 0x07, 0x00, 0x00, 0x42, 0x18, 0x00, 0x00, 0x6D, 0x08, 0x6D, 0x98, 0x00, 0x00, 0x07, 0x72, 0x98, 0x00, 0x00, 0x07, 0x82, 0x98, 0x00, 0x00, 0x08, 0x8C, 0x98, 0x00, 0x00, 0x07, 0x76, 0x98, 0x00, 0x00, 0x07, 0x7D, 0x98, 0x00, 0x00, 0x07, 0x66, 0x98, 0x00, 0x00, 0x0D, 0x3E, 0x00, 0x00, 0x00, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x98, 0x5D, 0x00, 0x00, 0x00, 0x96, 0x5D, 0x00, 0x00, 0x00, 0x9A, 0x5D, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x05, 0x01, 0x00, 0x87, 0x5C, 0x4E, 0x99, 0x8F, 0x44, 0x60, 0x49, 0x74, 0x43, 0xB6, 0xC5, 0x0C, 0x43, 0x70, 0xAC, 0x00, 0x01, 0x00, 0x70, 0xAC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0B, 0x00, 0x57, 0x6F, 0x72, 0x4B, 0x46, 0x6F, 0x72, 0x49, 0x6C, 0x49, 0x6C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0x3A, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x6D, 0x03, 0x64, 0x2D, 0x00, 0x00, 0x00, 0x65, 0x2D, 0x00, 0x00, 0x00, 0x66, 0x2D, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0xE3, 0x90, 0xD2, 0x00, 0x87, 0x5C, 0x30, 0xDB, 0x8E, 0x44, 0x60, 0x49, 0x74, 0x43, 0xCA, 0x78, 0x02, 0x43, 0xD2, 0x3C, 0x00, 0x01, 0x00, 0xD2, 0x3C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x05, 0x00, 0x42, 0x6F, 0x6F, 0x73, 0x73, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x89, 0x07, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x6D, 0x09, 0xC8, 0x98, 0x00, 0x00, 0x0B, 0xCE, 0x98, 0x00, 0x00, 0x09, 0xCB, 0x98, 0x00, 0x00, 0x0A, 0xD4, 0x98, 0x00, 0x00, 0x0A, 0xD1, 0x98, 0x00, 0x00, 0x0B, 0xD7, 0x98, 0x00, 0x00, 0x0B, 0x68, 0x98, 0x00, 0x00, 0x11, 0x3E, 0x00, 0x00, 0x00, 0x57, 0x23, 0x00, 0x00, 0x00, 0x05, 0x05, 0x99, 0x5D, 0x00, 0x00, 0x00, 0x9F, 0x24, 0x00, 0x00, 0x00, 0x97, 0x5D, 0x00, 0x00, 0x00, 0x30, 0xA2, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x18, 0x10, 0x01, 0x87, 0x5C, 0x00, 0x40, 0x8D, 0x44, 0x60, 0x49, 0x74, 0x43, 0x00, 0x00, 0x20, 0x43, 0x9E, 0x11, 0x01, 0x01, 0x87, 0x5B, 0x6A, 0x04, 0xF4, 0x00, 0xA0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x19, 0x42, 0x01, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0C, 0x00, 0x46, 0x42, 0x52, 0x5F, 0x56, 0x69, 0x63, 0x74, 0x6F, 0x72, 0x69, 0x61, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x46, 0x6C, 0x6F, 0x72, 0x69, 0x70, 0x61, 0x42, 0x52, 0x00, 0xFF, 0x8C, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x07, 0xB4, 0x14, 0x00, 0x00, 0x07, 0xFC, 0x14, 0x00, 0x00, 0x07, 0xDC, 0x14, 0x00, 0x00, 0x00, 0x48, 0x15, 0x00, 0x00, 0x00, 0x20, 0x15, 0x00, 0x00, 0x07, 0x6C, 0x15, 0x00, 0x00, 0x00, 0x17, 0x10, 0x00, 0x00, 0x00, 0x05, 0x04, 0x97, 0x5D, 0x00, 0x00, 0x00, 0x99, 0x5D, 0x00, 0x00, 0x00, 0x9B, 0x5D, 0x00, 0x00, 0x00, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xCB, 0x1F, 0x01, 0x87, 0x5C, 0x07, 0xBF, 0x90, 0x44, 0x60, 0x49, 0x74, 0x43, 0x6E, 0x47, 0x11, 0x43, 0x96, 0x4C, 0x00, 0x01, 0x00, 0x96, 0x4C, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0B, 0x00, 0x53, 0x61, 0x72, 0x61, 0x68, 0x43, 0x6F, 0x6E, 0x6E, 0x6F, 0x72, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x78, 0x07, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x6D, 0x06, 0x24, 0x02, 0x00, 0x00, 0x01, 0xAD, 0x01, 0x00, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x05, 0x1B, 0x11, 0x00, 0x00, 0x05, 0xFE, 0x0F, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x7A, 0x98, 0x39, 0x01, 0x87, 0x5C, 0x26, 0xAB, 0x8B, 0x44, 0x60, 0x49, 0x74, 0x43, 0x2E, 0x71, 0x12, 0x43, 0xDE, 0x74, 0x00, 0x01, 0x00, 0xDE, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x05, 0x00, 0x4C, 0x79, 0x72, 0x69, 0x7A, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x4E, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x77, 0x6B, 0x73, 0x4E, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x1C, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x08, 0xFF, 0x98, 0x00, 0x00, 0x0A, 0x05, 0x99, 0x00, 0x00, 0x0A, 0x02, 0x99, 0x00, 0x00, 0x0A, 0x0B, 0x99, 0x00, 0x00, 0x0A, 0x08, 0x99, 0x00, 0x00, 0x0A, 0x0E, 0x99, 0x00, 0x00, 0x0A, 0x1A, 0x2C, 0x00, 0x00, 0x00, 0x5E, 0x2D, 0x00, 0x00, 0x00, 0x05, 0x03, 0x96, 0x5D, 0x00, 0x00, 0x00, 0x98, 0x5D, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x20, 0xF3, 0x55, 0x01, 0x87, 0x5C, 0x00, 0x40, 0x8D, 0x44, 0x60, 0x49, 0x74, 0x43, 0x00, 0x00, 0x20, 0x43, 0xEC, 0x12, 0x01, 0x01, 0x87, 0x5B, 0x6A, 0x04, 0xF4, 0x00, 0xA0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0B, 0x00, 0x58, 0x78, 0x5A, 0x61, 0x33, 0x42, 0x6F, 0x4C, 0x41, 0x78, 0x58, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x45, 0x5F, 0x47, 0x5F, 0x59, 0x5F, 0x50, 0x5F, 0x54, 0x5F, 0x32, 0x35, 0xDC, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x7A, 0x07, 0x00, 0x00, 0x44, 0x18, 0x00, 0x00, 0x6D, 0x08, 0xC0, 0x11, 0x00, 0x00, 0x14, 0x08, 0x12, 0x00, 0x00, 0x14, 0xE4, 0x11, 0x00, 0x00, 0x14, 0x50, 0x12, 0x00, 0x00, 0x14, 0x2C, 0x12, 0x00, 0x00, 0x14, 0x74, 0x12, 0x00, 0x00, 0x14, 0xC8, 0x0F, 0x00, 0x00, 0x16, 0x7C, 0x10, 0x00, 0x00, 0x1A, 0x05, 0x03, 0x2F, 0x5F, 0x00, 0x00, 0x00, 0x35, 0x5F, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x33, 0x59, 0x01, 0x87, 0x5C, 0x00, 0x40, 0x8D, 0x44, 0x60, 0x49, 0x74, 0x43, 0x00, 0x00, 0x20, 0x43, 0x9E, 0x11, 0x01, 0x01, 0x87, 0x5B, 0x6A, 0x04, 0xF4, 0x00, 0xA0, 0x00, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x09, 0x00, 0x78, 0x58, 0x48, 0x41, 0x4D, 0x45, 0x44, 0x58, 0x78, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x43, 0x5F, 0x4F, 0x5F, 0x42, 0x5F, 0x52, 0x5F, 0x41, 0xC5, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x7E, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x07, 0xC0, 0x11, 0x00, 0x00, 0x07, 0x08, 0x12, 0x00, 0x00, 0x07, 0xE8, 0x11, 0x00, 0x00, 0x00, 0xED, 0x02, 0x00, 0x00, 0x00, 0x2C, 0x12, 0x00, 0x00, 0x07, 0x74, 0x12, 0x00, 0x00, 0x07, 0x17, 0x10, 0x00, 0x00, 0x00, 0x05, 0x04, 0x98, 0x5D, 0x00, 0x00, 0x00, 0x96, 0x5D, 0x00, 0x00, 0x00, 0x9A, 0x5D, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x7A, 0x74, 0x01, 0x87, 0x5C, 0x5D, 0x93, 0x91, 0x44, 0x60, 0x49, 0x74, 0x43, 0xFA, 0xFD, 0x0C, 0x43, 0x22, 0x06, 0x00, 0x01, 0x00, 0x22, 0x06, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x0A, 0x00, 0x54, 0x33, 0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 0x6F, 0x72, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7C, 0x07, 0x00, 0x00, 0x44, 0x26, 0x00, 0x00, 0x6D, 0x08, 0x80, 0x98, 0x00, 0x00, 0x1E, 0x86, 0x98, 0x00, 0x00, 0x1E, 0x83, 0x98, 0x00, 0x00, 0x1E, 0x8C, 0x98, 0x00, 0x00, 0x1E, 0x89, 0x98, 0x00, 0x00, 0x1E, 0x8F, 0x98, 0x00, 0x00, 0x1E, 0x68, 0x98, 0x00, 0x00, 0x26, 0x3E, 0x00, 0x00, 0x00, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x55, 0x0B, 0x01, 0x00, 0x00, 0x93, 0xA3, 0x00, 0x00, 0x00, 0x56, 0x0B, 0x01, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x0A, 0x00, 0x07, 0x6E, 0xB2, 0x01, 0x87, 0x5C, 0x9E, 0xDD, 0x8C, 0x44, 0x60, 0x49, 0x74, 0x43, 0x06, 0x54, 0x1C, 0x43, 0xF2, 0x74, 0x00, 0x01, 0x00, 0xF2, 0x74, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x0C, 0x42, 0x00, 0x00, 0xDC, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x04, 0x7C, 0x0F, 0x00, 0x00, 0x71, 0x71, 0x02, 0x00, 0x84, 0x80, 0x00, 0x00, 0xF0, 0xE6, 0x00, 0x00, 0x24, 0x15, 0x00, 0x00, 0x3E, 0x1B, 0x00, 0x00, 0x7D, 0x0F, 0x00, 0x00, 0xA0, 0x17, 0x04, 0x00, 0x06, 0x00, 0x4E, 0x34, 0x7A, 0x47, 0x75, 0x4C, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x5F, 0x45, 0x76, 0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F, 0x4E, 0x5F, 0xB0, 0x08, 0x00, 0x00, 0x0C, 0x00, 0x48, 0x61, 0x72, 0x64, 0x43, 0x6F, 0x72, 0x65, 0x4F, 0x6E, 0x65, 0x53, 0x02, 0x00, 0x00, 0x00, 0xD1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0xFF, 0x25, 0x3A, 0x00, 0x00, 0x44, 0x1C, 0x00, 0x00, 0x6D, 0x07, 0xFF, 0x98, 0x00, 0x00, 0x0C, 0x05, 0x99, 0x00, 0x00, 0x0C, 0x02, 0x99, 0x00, 0x00, 0x0C, 0x0C, 0x99, 0x00, 0x00, 0x0C, 0x08, 0x99, 0x00, 0x00, 0x0C, 0x10, 0x99, 0x00, 0x00, 0x0F, 0xF3, 0x98, 0x00, 0x00, 0x0C, 0x05, 0x05, 0x39, 0x90, 0x00, 0x00, 0x00, 0x3F, 0x90, 0x00, 0x00, 0x00, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x33, 0x90, 0x00, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x0A, 0x00, 0x1B, 0xA0, 0xB3, 0x01, 0x87, 0x5C, 0x0E, 0x68, 0x86, 0x44, 0x60, 0x49, 0x74, 0x43, 0x46, 0xBB, 0x06, 0x43, 0x9E, 0x11, 0x01, 0x01, 0x87, 0x5B, 0x6A, 0x04, 0x00, 0x00, 0x20, 0x08, 0x01, 0x00, 0x03, 0x00, 0x33, 0x33, 0xB3, 0x42, 0x00, 0x00, 0x8C, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x04, 0x24, 0x15, 0x00, 0x00, 0xF9, 0x2D, 0x03, 0x00, 0x7C, 0x0F, 0x00, 0x00, 0xE2, 0x30, 0x06, 0x00, 0x3B, 0xC0, 0x00, 0x00, 0x16, 0x30, 0x02, 0x00, 0xC0, 0x3D, 0x01, 0x00, 0xF3, 0x17, 0x04, 0x00, 0x0B, 0x00, 0x6F, 0x30, 0x54, 0x68, 0x65, 0x45, 0x76, 0x69, 0x6C, 0x30, 0x6F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x43, 0x5F, 0x4F, 0x5F, 0x42, 0x5F, 0x52, 0x5F, 0x41, 0xC5, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x22, 0x3A, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x6D, 0x08, 0xFF, 0x98, 0x00, 0x00, 0x0D, 0x06, 0x99, 0x00, 0x00, 0x0C, 0x03, 0x99, 0x00, 0x00, 0x0C, 0x1E, 0x99, 0x00, 0x00, 0x0C, 0x09, 0x99, 0x00, 0x00, 0x0B, 0x10, 0x99, 0x00, 0x00, 0x00, 0xE6, 0x98, 0x00, 0x00, 0x00, 0xFC, 0x98, 0x00, 0x00, 0x0B, 0x05, 0x03, 0xAC, 0x0B, 0x01, 0x00, 0x00, 0xCA, 0x5E, 0x00, 0x00, 0x02, 0x93, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x98, 0x6C, 0xB4, 0x01, 0x87, 0x5C, 0x4C, 0xCF, 0x8E, 0x44, 0x60, 0x49, 0x74, 0x43, 0xD2, 0xE9, 0x1B, 0x43, 0x50, 0x4F, 0x00, 0x01, 0x00, 0x50, 0x4F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x06, 0x00, 0x32, 0x31, 0x31, 0x56, 0x49, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x42, 0x72, 0x6F, 0x54, 0x48, 0x33, 0x72, 0x73, 0x4B, 0x18, 0x00, 0x00, 0x0C, 0x00, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x58, 0x18, 0x00, 0x00, 0x07, 0xF4, 0x55, 0x01, 0x87, 0x5C, 0x00, 0xE0, 0x90, 0x44, 0x60, 0x49, 0x74, 0x43, 0x00, 0x00, 0x14, 0x43, 0xA3, 0x14, 0x01, 0x01, 0x87, 0x5C, 0x87, 0x04, 0xF4, 0x00, 0x94, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x58, 0x78, 0x5A, 0x61, 0x33, 0x42, 0x6F, 0x4C, 0x41, 0x78, 0x58, 0x04, 0x00, 0x20, 0xF3, 0x55, 0x01, 0x45, 0x1D, 0x00, 0x00, 0x6A, 0x34, 0x59, 0x01, 0x87, 0x5C, 0x12, 0xC3, 0x8D, 0x44, 0x60, 0x49, 0x74, 0x43, 0x56, 0x0D, 0x3A, 0x43, 0x3D, 0x53, 0x01, 0x01, 0x87, 0x5C, 0x6E, 0x04, 0xF4, 0x00, 0xBA, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x78, 0x58, 0x48, 0x41, 0x4D, 0x45, 0x44, 0x58, 0x78, 0x04, 0xA8, 0x33, 0x59, 0x01, 0x79, 0x0B, 0x01, 0x00, 0x78, 0x72, 0xB2, 0x01, 0x87, 0x5C, 0x67, 0xFE, 0x8E, 0x44, 0x60, 0x49, 0x74, 0x43, 0xBE, 0xFC, 0x1E, 0x43, 0xF2, 0x74, 0x00, 0x01, 0x00, 0xF2, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x4E, 0x34, 0x7A, 0x47, 0x75, 0x4C, 0x04, 0x07, 0x6E, 0xB2, 0x01
                0x28, 0x3A, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x6D, 0x08, 0x49, 0x99, 0x00, 0x00, 0x0B, 0x4F, 0x99, 0x00, 0x00, 0x0B, 0x4C, 0x99, 0x00, 0x00, 0x0B, 0x55, 0x99, 0x00, 0x00, 0x0D, 0x52, 0x99, 0x00, 0x00, 0x0B, 0x58, 0x99, 0x00, 0x00, 0x0B, 0xE6, 0x98, 0x00, 0x00, 0x0A, 0xFE, 0x98, 0x00, 0x00, 0x0B, 0x05, 0x05, 0x58, 0x0B, 0x01, 0x00, 0x00, 0x5A, 0x0B, 0x01, 0x00, 0x00, 0x9F, 0x24, 0x00, 0x00, 0x00, 0x59, 0x0B, 0x01, 0x00, 0x00, 0x5C, 0x5F, 0x00, 0x00, 0x07, 0x00, 0xD8, 0x1C, 0x88, 0x0F, 0x99, 0x66, 0x00, 0x20, 0xA4, 0x44, 0x89, 0x6C, 0xD2, 0xC2, 0x00, 0xC0, 0x05, 0x44, 0xBE, 0xD9, 0x01, 0x01, 0x99, 0x66, 0x21, 0x05, 0x97, 0xFF, 0x17, 0x02, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xCC, 0x8C, 0x42, 0x00, 0x00, 0x5C, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x02, 0x24, 0x15, 0x00, 0x00, 0xF9, 0x26, 0x03, 0x00, 0x89, 0x0F, 0x00, 0x00, 0xEE, 0x2F, 0x05, 0x00, 0x03, 0x00, 0x59, 0x65, 0x74, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x47, 0x65, 0x6E, 0x74, 0x69, 0x58, 0x58, 0x86, 0x1F, 0x00, 0x00, 0x0B, 0x00, 0x59, 0x65, 0x74, 0x5F, 0x54, 0x6F, 0x5F, 0x43, 0x6F, 0x6D, 0x65, 0x02, 0x00, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x7F, 0x07, 0x00, 0x00, 0x42, 0x18, 0x00, 0x00, 0x6D, 0x08, 0x80, 0x98, 0x00, 0x00, 0x0B, 0x86, 0x98, 0x00, 0x00, 0x0B, 0x83, 0x98, 0x00, 0x00, 0x0B, 0x8B, 0x98, 0x00, 0x00, 0x0B, 0x89, 0x98, 0x00, 0x00, 0x0B, 0x8E, 0x98, 0x00, 0x00, 0x0B, 0x5C, 0x98, 0x00, 0x00, 0x14, 0x6B, 0x98, 0x00, 0x00, 0x12, 0x05, 0x05, 0x9E, 0x24, 0x00, 0x00, 0x00, 0x6B, 0xA3, 0x00, 0x00, 0x00, 0x57, 0x0B, 0x01, 0x00, 0x00, 0x07, 0xA2, 0x00, 0x00, 0x00, 0x5B, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x43, 0x25, 0x88, 0x0F, 0x99, 0x66, 0x00, 0x80, 0xB1, 0x44, 0xAF, 0xD8, 0xD1, 0xC2, 0x00, 0x40, 0x02, 0x44, 0x3A, 0xCC, 0x01, 0x01, 0x99, 0x66, 0x8C, 0x05, 0x98, 0xFF, 0x09, 0x02, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x1E, 0xC5, 0x42, 0x01, 0x00, 0x9A, 0x43, 0x00, 0x00, 0xC8, 0x42, 0x02, 0x24, 0x15, 0x00, 0x00, 0x00, 0x5F, 0x06, 0x00, 0x4C, 0xD5, 0x00, 0x00, 0x5D, 0x8B, 0x07, 0x00, 0x08, 0x00, 0x4B, 0x61, 0x4B, 0x61, 0x52, 0x75, 0x54, 0x6F, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x47, 0x65, 0x6E, 0x74, 0x69, 0x58, 0x58, 0x86, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x39, 0x24, 0x00, 0x00, 0xF2, 0x02, 0x00, 0x00, 0x99, 0x66, 0x71, 0x4D, 0xA9, 0x44, 0x20, 0x56, 0xD1, 0xC2, 0x9A, 0x79, 0xE0, 0x43, 0xFF, 0x3F, 0x00, 0x01, 0x00, 0xFF, 0x3F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x02, 0x02, 0x01, 0x0F
            };

            using (var packet = new BinaryReader(new MemoryStream(groupSpawnData.ToArray())))
            {

                CurBot = SROServer.Server.Available.Last().GetBots().First();

                var i = 0;
                while (packet.BaseStream.Position + 4 < packet.BaseStream.Length)
                {
                    if (!SpawnParsing.ParseSpawn(packet, CurBot))
                    {
                        Console.WriteLine("groupspawn: error on curIdx: {0}/{1}", i, groupSpawnCnt);
                    }
                    else Console.WriteLine("{0}/{1}: done.", i, groupSpawnCnt);
                    ++i;
                }
            }
        }

        private void guiTreeview_bots_SelectedItemChanged(object sender, EventArgs e)
        {
            CurBot = null;

            var tv = sender as TreeView;
            if (tv == null) return;

            var server = tv.SelectedItem as SROServer.Server;
            if (server != null)
            {
                guiTabItemServerSettings.DataContext = server;
                return;
            }

            var bot = tv.SelectedItem as SROBot.Bot;
            if (bot == null) return;

            CurBot = bot;

            guiTabItemBotSettings.DataContext = bot;
        }

        private void guiBtnStartStopBot_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (!bot.Loop.IsStarted)
                bot.Loop.Start();
            else
                bot.Loop.Stop(SROBot.Statistic.STOP_REASON.USER);
        }

        private void guiBtn_minimap_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            new DlgMiniMap(bot).Show();
        }

        private void guiBtnStartClient_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.Start(true);
        }

        private void guiBtn_destroyProxy_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.StopReconnecting();

            if (bot.Proxy == null) return;

            bot.Proxy.Close();
            bot.Proxy = null;
        }

        private void button3_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.Loop.PrintStatus();
        }

        private void button4_Click(object sender, RoutedEventArgs e)
        {
            foreach (var bot in SROServer.Server.Available.Last().GetBots().Where(b => b.Proxy != null))
            {
                Console.WriteLine(bot.CharName);
                bot.Proxy.PrintContextPacketCounts();
                Console.WriteLine();
                Console.WriteLine();
            }
        }
        
        private void guiBtn_serverStartAll_Click(object sender, RoutedEventArgs e)
        {
            var server = guiTabItemServerSettings.DataContext as SROServer.Server;
            if (server == null)
            {
                MessageBox.Show("select a server!");
                return;
            }

            new Thread(() =>
            {
                foreach (var bot in server.GetBots())
                {
                    bot.Start(true);

                    Thread.Sleep(15 * 1000);
                }
            }).Start();
        }

        private void guiBtn_refreshMobs_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var mobs = bot.Spawns.Mobs.GetAll().Where(m => m.Ignore <= 0 && !m.IsPartyMemberAttacking()).ToArray();
            guiListbox_mobs.ItemsSource = mobs.OrderByDescending(m => m.IsAttackingMe).ThenBy(m => m.GetScore(bot.Config.Training.MobPreferences)).Select(m =>
            {
                return String.Format("{5}{6} 0x{0} ({1} / {2}), d:{3} => {4}", m.Type.ToString("X2"), m.CurHP, m.Mobinfo.Hp, m.Distance, m.GetScore(bot.Config.Training.MobPreferences), bot.CurSelected == m ? "!" : " ", m.IsAttackingMe ? "a" : " ");
            });
        }

        private void guiBtn_chatAll_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.Chat.ShowAll();
        }

        private void guiBtn_chatNone_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.Chat.ShowNone();
        }

        private void guiBtn_killClient_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.KillClient();
        }

        private void guiBtn_hideClient_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.ToggleClient();
        }

        private void guiBtn_partymaster_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            SROBot.Party.PartyLeader = bot.CharName;
        }

        private void itemsMerged(object s, object e)
        {
            waitingForMergin = false;
        }

        private bool waitingForMergin = false;
        private bool mergin = false;
        private void mergeItems(SROBot.Bot bot)
        {
            if (mergin) return;

            mergin = true;

            bot.Inventory.ItemsMerged -= itemsMerged;
            bot.Inventory.ItemsMerged += itemsMerged;

            var need2wait = false;
            do
            {
                waitingForMergin = true;
                need2wait = bot.Inventory.MergeItems();
                Console.WriteLine("need2wait: {0}", need2wait);
                if (need2wait)
                {
                    var waitCnt = 20;
                    while (waitingForMergin && waitCnt-- > 0)
                    {
                        Thread.Sleep(100);
                    }
                }
                else { break; }

                if (waitingForMergin)
                {
                    Console.WriteLine("timeout mergin..");
                    break;
                }
            }
            while (need2wait);

            bot.Inventory.ItemsMerged -= itemsMerged;
            mergin = false;
        }

        private byte sellingSlot = 13;

        private bool checkItemSell(SROBot.InventoryItem invitem)
        {
            if (SROBot.Inventory.IsItemEmpty(invitem)) return false;

            string type = invitem.Iteminfo.Type;
            string name = invitem.Iteminfo.Name;

            if (type.Contains("_AVATAR_") && type.Contains("_FAIRY"))
            {
                return true;
            }

            if (type.EndsWith("E080723_SKILL_EXP_20"))
            {
                return true;
            }

            if ((name.StartsWith("Pink Pig Summon") || name.StartsWith("Gold Pig Summon")) && !invitem.Summoned)
            {
                return true;
            }

            return false;
        }

        private bool selling = false;
        private bool waitForSelling = false;

        private void itemSold(object s, object e)
        {
            waitForSelling = false;
            ++sellingSlot;
        }

        private void sellEventItems(SROBot.Bot bot)
        {
            sellingSlot = 13;

            //NPC_CA_ACCESSORY
            var npc = bot.Spawns.Shops.GetAll().FirstOrDefault(s => s.Mobinfo.Type.StartsWith("NPC_") && s.Mobinfo.Type.EndsWith("ACCESSORY"));
            if (npc == null) return;

            selling = true;

            bot.Inventory.ItemSold -= itemSold;
            bot.Inventory.ItemSold += itemSold;

            SROBot.Actions.NPCSelect(npc.UID, bot);
            Thread.Sleep(1000);
            SROBot.Actions.NPCDeselect(npc.UID, bot);
            Thread.Sleep(1000);


            SROBot.InventoryItem invitem = null;

            var need2wait = false;
            do
            {
                need2wait = false;
                waitForSelling = false;

                invitem = null;
                while (SROBot.Inventory.IsItemEmpty(invitem) && sellingSlot < bot.Inventory.Size)
                {
                    invitem = bot.Inventory.GetItem(sellingSlot++);

                    if (SROBot.Inventory.IsItemEmpty(invitem) || !checkItemSell(invitem))
                    {
                        //bot.Debug("dont sell item on slot {0}", invitem?.Slot ?? sellingSlot - 1);

                        invitem = null;
                        continue;
                    }
                }

                if (SROBot.Inventory.IsItemNotEmpty(invitem))
                {
                    bot.Debug("sell item on slot: {0} / {1}", invitem.Slot, invitem.Iteminfo.Type);

                    SROBot.Actions.SellItem(invitem.Slot, invitem.Count, npc.UID, bot);
                    --sellingSlot; // stay at current slot -> waiting for feedback from server !

                    need2wait = true;
                    waitForSelling = true;
                }

                Console.WriteLine("selling: need2wait: {0}", need2wait);

                if (need2wait)
                {
                    var waitCnt = 25;
                    while (waitForSelling && waitCnt-- > 0)
                    {
                        Thread.Sleep(100);
                    }
                }
                else { break; }

                if (waitForSelling)
                {
                    Console.WriteLine("timeout selling..");
                    break;
                }
            }
            while (need2wait);

            SROBot.Actions.NPCDeselect(npc.UID, bot);

            bot.Inventory.ItemSold -= itemSold;
            selling = false;
        }

        private async void guiBtn_mergeItems_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            mergeItems(bot);
        }
        
        private void guiBtn_storagetest_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            new Thread(() =>
            {
                foreach (var shop in bot.Spawns.Shops.GetAll())
                {
                    bot.Debug("{0},{1},{2}", shop.Mobinfo.Name, shop.Mobinfo.Type, shop.UID);
                }

                var storage = bot.Spawns.Shops.GetAll().FirstOrDefault(s => s.Mobinfo.Type.EndsWith("WAREHOUSE_M") || s.Mobinfo.Type.EndsWith("WAREHOUSE"));
                var guilstroage = bot.Spawns.Shops.GetAll().FirstOrDefault(s => s.Mobinfo.Type.EndsWith("_GUILD"));

                if (storage != null)
                {
                    bot.Loop._isStoring = true;

                    bot.Debug("storage found!");

                    bot.Debug("storage: NPCSelect!");
                    SROBot.Actions.NPCSelect(storage.UID, bot);
                    Thread.Sleep(31000);

                    // gleich mal mit dem hier testen
                    //bot.Debug("storage: NPCDeselect!");
                    //SROBot.Actions.NPCDeselect(storage.UID, bot);
                    //Thread.Sleep(1000);

                    bot.Debug("storage: StorageOpen!");
                    SROBot.Actions.StorageOpen(storage.UID, bot);
                    Thread.Sleep(32000);

                    bot.Debug("storage: GetStorageList!");
                    SROBot.Actions.GetStorageList(storage.UID, bot);
                    Thread.Sleep(35000);

                    bot.Debug("storage: PutItemToStorage!");
                    SROBot.Actions.PutItemToStorage(storage.UID, 13, bot);
                    Thread.Sleep(31000);

                    bot.Debug("storage: NPCDeselect!");
                    SROBot.Actions.NPCDeselect(storage.UID, bot);
                    Thread.Sleep(31000);

                    bot.Debug("storage: NPCDeselect!");
                    SROBot.Actions.NPCDeselect(storage.UID, bot);
                    Thread.Sleep(35000);

                    bot.Loop._isStoring = false;
                }

                if (guilstroage != null)
                {
                    bot.Loop._isStoring = true;

                    bot.Debug("guilstroage found!");

                    bot.Debug("guilstroage: NPCSelect!");
                    SROBot.Actions.NPCSelect(guilstroage.UID, bot);
                    Thread.Sleep(31000);

                    // gleich mal mit dem hier testen
                    //bot.Debug("guilstroage NPCDeselect!");
                    //SROBot.Actions.NPCDeselect(guilstroage.UID, bot);
                    //Thread.Sleep(1000);

                    bot.Debug("guilstroage GuildStorageOpen!");
                    SROBot.Actions.GuildStorageOpen(guilstroage.UID, bot);
                    Thread.Sleep(32000);

                    bot.Debug("guilstroage OpenGuildStorage!");
                    SROBot.Actions.OpenGuildStorage(guilstroage.UID, bot);
                    Thread.Sleep(31000);

                    bot.Debug("guilstroage GetGuildStorageList!");
                    SROBot.Actions.GetGuildStorageList(guilstroage.UID, bot);
                    Thread.Sleep(35000);

                    bot.Debug("guilstroage PutItemToGuildStorage!");
                    SROBot.Actions.PutItemToGuildStorage(guilstroage.UID, 14, bot);
                    Thread.Sleep(31000);

                    bot.Debug("guilstroage CloseGuildStorage!");
                    SROBot.Actions.CloseGuildStorage(guilstroage.UID, bot);
                    Thread.Sleep(31000);

                    bot.Debug("guilstroage NPCDeselect!");
                    SROBot.Actions.NPCDeselect(guilstroage.UID, bot);
                    Thread.Sleep(31000);

                    bot.Debug("guilstroage CloseGuildStorage!");
                    SROBot.Actions.CloseGuildStorage(guilstroage.UID, bot);

                    Thread.Sleep(31000);

                    bot.Loop._isStoring = false;
                }

            }).Start();
        }

        private void guiTxtbox_chatMsg_KeyDown(object sender, KeyEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var txtbox = sender as TextBox;
            if (txtbox == null) return;

            if (String.IsNullOrEmpty(txtbox.Text)) return;

            var chatType = guiCombobox_chatType.SelectedItem as String;
            if (String.IsNullOrEmpty(chatType))
            {
                chatType = guiCombobox_chatType.Text;
                if (String.IsNullOrEmpty(chatType)) return;
            }

            if (e.Key == Key.Enter)
            {
                bot.Chat.AddChatType(chatType);
                bot.Chat.SendMessage(chatType, txtbox.Text);
            }
        }

        private void guiListbox_chat_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var listbox = sender as ListBox;
            if (listbox == null) return;

            var msg = listbox.SelectedItem as SROBot.Chat.Message;
            if (msg == null) return;

            if (msg.Type != SROBot.Chat.CHAT_TYPE.UNIQUE &&
                msg.Type != SROBot.Chat.CHAT_TYPE.NOTICE)
            {
                bot.Chat.AddChatType(msg.Name);
                guiCombobox_chatType.Text = msg.Name;
            }
        }

        private void guiBtn_soOkHappy_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            //foreach (var shop in bot.Spawns.Shops.GetAll())
            //{
            //    bot.Debug("{0},{1},{2}", shop.Mobinfo.Name, shop.Mobinfo.Type, shop.UID);
            //}

            while (bot.Proxy != null && bot.Proxy.HasAgentConnected)
            {

                while (mergin)
                {
                    bot.Debug("wait for mergin..");
                    Thread.Sleep(1000);
                }

                while (selling)
                {
                    bot.Debug("wait for selling..");
                    Thread.Sleep(1000);
                }

                var happies = new int[]
                {
                    bot.Inventory.GetItems().Where(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_H")).Sum(i => (ushort?)i.Count) ?? 0,
                    bot.Inventory.GetItems().Where(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_A")).Sum(i => (ushort?)i.Count) ?? 0,
                    bot.Inventory.GetItems().Where(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_P")).Sum(i => (ushort?)i.Count) ?? 0,
                    bot.Inventory.GetItems().Where(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_P_2")).Sum(i => (ushort?)i.Count) ?? 0,
                    bot.Inventory.GetItems().Where(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_Y")).Sum(i => (ushort?)i.Count) ?? 0,
                };

                bot.Debug("H: {0}", happies[0]);
                bot.Debug("A: {0}", happies[1]);
                bot.Debug("P: {0}", happies[2]);
                bot.Debug("P: {0}", happies[3]);
                bot.Debug("Y: {0}", happies[4]);
                bot.Debug("happies: {0}", happies.Min());

                if (!bot.Inventory.GetItems().Any(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_H")) ||
                    !bot.Inventory.GetItems().Any(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_A")) ||
                    !bot.Inventory.GetItems().Any(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_P")) ||
                    !bot.Inventory.GetItems().Any(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_P_2")) ||
                    !bot.Inventory.GetItems().Any(i => i.Iteminfo.Type.EndsWith("E110125_HAPPY_Y")))
                {
                    bot.Debug("no full HAPPY !");
                    return;
                }

                if (bot.Inventory.IsFull())
                {
                    bot.Debug("inventory full !");
                    return;
                }

                var sook = bot.Spawns.Shops.GetAll().FirstOrDefault(s => s.Mobinfo.Name.Contains("So-Ok"));

                if (sook != null)
                {
                    bot.Debug("so-ok: NPCSelect!");
                    SROBot.Actions.NPCSelect(sook.UID, bot);
                    Thread.Sleep(700);

                    bot.Debug("so-ok: talk to!");
                    SROBot.Actions.NPCTalkTo(sook.UID, bot);
                    Thread.Sleep(700);
                    bot.Debug("so-ok: happy1!");
                    SROBot.Actions.NPCEventExchange(6, bot);
                    Thread.Sleep(700);
                    bot.Debug("so-ok: happy2!");
                    SROBot.Actions.NPCEventExchange(5, bot);
                    Thread.Sleep(1500);

                    bot.Debug("so-ok: NPCDeselect!");
                    SROBot.Actions.NPCDeselect(sook.UID, bot);

                    mergeItems(bot);

                    if (bot.Inventory.GetItems().Any(i => checkItemSell(i)))
                    {
                        sellEventItems(bot);
                    }
                }
            }
        }

        private void button5_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.IsUsingReturnScroll = false;
        }

        private void guiBtn_incFire_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            if (bot.Consig == null)
            {
                bot.Consig = new SROBot.Consignment(bot);
            }

            bot.Consig.Search(33 /* elixirs */, 0, (items) =>
            {
                foreach (var item in items.Where(i => i.Item?.Type == "ITEM_ETC_ARCHEMY_REINFORCE_RECIPE_WEAPON_B" && (i.Price / i.Count) <= 475000).ToArray())
                {
                    bot.Log($"we should buy these elixirs: {item.Player}: {item.Price:N0} -- {item.Count}");
                }
            });
        }

        private void guiBtn_invisibleClick(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            bot.Consig = null;
        }

        #region packet-log

        private void guiListview_ignorePackets_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var lb = sender as ListBox;
            if (lb == null) return;
            
            bot.Config.PacketLogging.IgnoredPackets.Remove(lb.SelectedItem as string);
        }

        private void guiListview_filteredPackets_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var lb = sender as ListBox;
            if (lb == null) return;
            
            bot.Config.PacketLogging.FilteredPackets.Remove(lb.SelectedItem as string);
        }

        private void guiListview_packetLogs_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            // ..
        }

        private void guiBtn_addPacketToIgnore_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var opcode = guiTextox_packetOpcode.Text.ToUpper();
            int dummy;
            if (!int.TryParse(opcode, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out dummy)) return;

            if (bot.Config.PacketLogging.IgnoredPackets.Contains(opcode)) return;
            bot.Config.PacketLogging.IgnoredPackets.Add(opcode);
        }

        private void guiBtn_addPacketToFilter_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var opcode = guiTextox_packetOpcode.Text.ToUpper();
            int dummy;
            if (!int.TryParse(opcode, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out dummy)) return;

            if (bot.Config.PacketLogging.FilteredPackets.Contains(opcode)) return;
            bot.Config.PacketLogging.FilteredPackets.Add(opcode);
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;
            if (bot.Proxy == null) return;

            bot.Proxy.LoggedPackets.Clear();
        }

        private void guiBtn_copyPacketLogs_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;
            if (bot.Proxy == null) return;

            Clipboard.SetText(string.Join("\r\n", bot.Proxy.LoggedPackets));
        }

        #endregion
        
        private void guiBtn_setDesignatePoint_Click(object sender, RoutedEventArgs e)
        {
            SROBot.Actions.SetDesignatePoint(CurBot, Convert.ToUInt32(textBox.Text));
        }

        private void guiBtn_partyMemberAdd_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var playerName = guiTextbox_partyMemberName.Text;
            if (string.IsNullOrEmpty(playerName)) return;
            if (bot.Config.Party.Members.Contains(playerName)) return;

            bot.Config.Party.Members.Add(playerName);
        }

        private void guiBtn_storingCopyRules_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            Clipboard.SetDataObject(bot.Config.Storage.StoringConfiguration.ToArray(), true);
        }

        private void guiBtn_storingImportRules_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            try
            {
                var cbDataObject = Clipboard.GetDataObject();
                var cbData = cbDataObject.GetData(typeof(SROBot.Configuration.StoringItemOptions[]));
                var storingRule = cbData as SROBot.Configuration.StoringItemOptions[];
                foreach (var rule in storingRule)
                {
                    if (bot.Config.Storage.StoringConfiguration.Contains(rule))
                    {
                        bot.Config.Storage.StoringConfiguration.Remove(rule); // overwrite old one !
                    }

                    bot.Config.Storage.StoringConfiguration.Add(rule);
                }

                var storingConfig = bot.Config.Storage.StoringConfiguration.Distinct().ToList();
                bot.Config.Storage.StoringConfiguration.Clear();
                storingConfig.ForEach(sc => bot.Config.Storage.StoringConfiguration.Add(sc));
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not import settings..\r\nNothing similiar found in Clipboard!", "Storing rule import - ERROR!", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void button8_Click(object sender, RoutedEventArgs e)
        {

            var chardata = new byte[]
            {
                //0x90, 0x0D, 0x77, 0x66, 0x80, 0x07, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x4B, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x33, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x13, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x85, 0x5F, 0x00, 0x00, 0x64, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5F, 0x00, 0x00, 0x64, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x97, 0x00, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x81, 0x5F, 0x00, 0x00, 0x08, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x5F, 0x00, 0x00, 0x05, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x5F, 0x00, 0x00, 0x05, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x5F, 0x00, 0x00, 0x1E, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x8B, 0x00, 0x00, 0x09, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x56, 0x60, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xA4, 0x00, 0x00, 0x0A, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, 0x00, 0x01, 0x12, 0x01, 0x00, 0x00, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x00, 0x01, 0x14, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x7A, 0x32, 0x13, 0xA8, 0x61, 0x00, 0xC0, 0x78, 0x44, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x80, 0x8D, 0x44, 0x08, 0x16, 0x00, 0x01, 0x00, 0x08, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x05, 0x00, 0x42, 0x75, 0x49, 0x6D, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x57, 0x03, 0xE1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x87, 0xC6, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
                //0x90, 0x15, 0x69, 0x57, 0x73, 0x07, 0x00, 0x00, 0x00, 0x7A, 0x7A, 0xD3, 0xBA, 0x11, 0xE3, 0x02, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x2B, 0x29, 0xDF, 0xF6, 0x53, 0x00, 0x00, 0x00, 0x12, 0xFB, 0x55, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xF2, 0x00, 0x00, 0x7A, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x4A, 0x06, 0x00, 0x00, 0x00, 0x00, 0x48, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xB3, 0x16, 0x00, 0x00, 0x00, 0x4C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x16, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x16, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1D, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x62, 0x0E, 0x00, 0x00, 0xE8, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x92, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x98, 0x00, 0x00, 0x05, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x98, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x04, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x65, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0xDD, 0x98, 0x00, 0x00, 0x12, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x95, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0xD7, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x98, 0x00, 0x00, 0x05, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x04, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x77, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x62, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x98, 0x00, 0x00, 0x19, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0xA7, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x04, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0xFD, 0xAB, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x62, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x02, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x62, 0x98, 0x00, 0x00, 0x12, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x98, 0x00, 0x00, 0x19, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x74, 0x98, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x04, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x02, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x98, 0x00, 0x00, 0x12, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x71, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x05, 0x97, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x33, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x12, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x04, 0x73, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x28, 0x00, 0x00, 0x04, 0x81, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x03, 0x67, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xB9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x61, 0x0E, 0x00, 0x00, 0xE8, 0x03, 0x49, 0x00, 0x00, 0x00, 0x00, 0x11, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x11, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x11, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x61, 0x0E, 0x00, 0x00, 0xE8, 0x03, 0x51, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xBF, 0x00, 0x00, 0xE8, 0x03, 0x52, 0x00, 0x00, 0x00, 0x00, 0x96, 0x08, 0x00, 0x00, 0x08, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x65, 0x00, 0x00, 0x01, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x2B, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x13, 0xA4, 0x00, 0x00, 0x64, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x0B, 0x01, 0x00, 0xED, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x0B, 0x01, 0x00, 0xF4, 0x01, 0x6A, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x0B, 0x01, 0x00, 0xF4, 0x01, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8B, 0x00, 0x00, 0xAB, 0x03, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8B, 0x00, 0x00, 0xE8, 0x03, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x75, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x76, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x96, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x7A, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, 0x00, 0x01, 0x12, 0x01, 0x00, 0x00, 0x7B, 0x01, 0x13, 0x01, 0x00, 0x00, 0x7B, 0x01, 0x14, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x29, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2F, 0x00, 0x00, 0x00, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x01, 0x01, 0x35, 0x00, 0x00, 0x00, 0x01, 0x01, 0x6B, 0x00, 0x00, 0x00, 0x01, 0x01, 0x6E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x74, 0x00, 0x00, 0x00, 0x01, 0x01, 0x77, 0x00, 0x00, 0x00, 0x01, 0x01, 0x79, 0x00, 0x00, 0x00, 0x01, 0x01, 0x7B, 0x00, 0x00, 0x00, 0x01, 0x01, 0xB0, 0x03, 0x00, 0x00, 0x01, 0x01, 0x06, 0x05, 0x00, 0x00, 0x01, 0x01, 0x11, 0x05, 0x00, 0x00, 0x01, 0x01, 0x1C, 0x05, 0x00, 0x00, 0x01, 0x01, 0xB9, 0x05, 0x00, 0x00, 0x01, 0x01, 0xCA, 0x05, 0x00, 0x00, 0x01, 0x01, 0xDB, 0x05, 0x00, 0x00, 0x01, 0x01, 0xD3, 0x1F, 0x00, 0x00, 0x01, 0x01, 0xDB, 0x1F, 0x00, 0x00, 0x01, 0x01, 0x55, 0x20, 0x00, 0x00, 0x01, 0x01, 0x68, 0x20, 0x00, 0x00, 0x01, 0x01, 0x75, 0x20, 0x00, 0x00, 0x01, 0x01, 0xF3, 0x87, 0x00, 0x00, 0x01, 0x01, 0xD7, 0xAF, 0x00, 0x00, 0x01, 0x01, 0x37, 0xD5, 0x00, 0x00, 0x01, 0x01, 0x48, 0xD5, 0x00, 0x00, 0x01, 0x01, 0x34, 0xD6, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xFA, 0x0D, 0x15, 0x99, 0x66, 0xEB, 0x27, 0x6F, 0x44, 0x92, 0x84, 0xD5, 0xC2, 0xC8, 0x37, 0xBB, 0x44, 0xBC, 0xFA, 0x00, 0x01, 0x00, 0xBC, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x06, 0x00, 0x73, 0x65, 0x6C, 0x6C, 0x30, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x57, 0x03, 0xE0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7E, 0x01, 0x00, 0x00, 0x07, 0x05, 0x00, 0x49, 0x37, 0xD5, 0x00, 0x00, 0x01, 0x49, 0x34, 0xD6, 0x00, 0x00, 0x03, 0x4A, 0xEE, 0x03, 0x00, 0x64, 0x04, 0x4A, 0xF8, 0x03, 0x00, 0x64, 0x0B, 0x49, 0x48, 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
                //0x90, 0x99, 0x8A, 0x9B, 0x73, 0x07, 0x00, 0x00, 0x00, 0x36, 0x36, 0xEB, 0x2E, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xF8, 0x44, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x2D, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x0F, 0x00, 0x00, 0xC1, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x12, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x03, 0x00, 0x00, 0x01, 0x6B, 0x09, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x12, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x40, 0x13, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x64, 0x13, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x0F, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x70, 0x10, 0x00, 0x00, 0x05, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x16, 0x00, 0x00, 0x05, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x07, 0x00, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x16, 0x00, 0x00, 0x05, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x16, 0x00, 0x00, 0x05, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x85, 0x5F, 0x00, 0x00, 0x47, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5F, 0x00, 0x00, 0x27, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x97, 0x00, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x81, 0x5F, 0x00, 0x00, 0x0B, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x5F, 0x00, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x14, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x5F, 0x00, 0x00, 0x1E, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x8B, 0x00, 0x00, 0x09, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x56, 0x60, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xA4, 0x00, 0x00, 0x0A, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x05, 0x00, 0x00, 0x00, 0xA1, 0x0E, 0xD2, 0x12, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x2F, 0x00, 0x00, 0x00, 0x86, 0x84, 0x78, 0x26, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x2A, 0x00, 0x00, 0x00, 0xA9, 0x49, 0x31, 0x41, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x33, 0x00, 0x00, 0x01, 0x51, 0x30, 0x14, 0x09, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0xA5, 0x02, 0x06, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xD4, 0x08, 0x80, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, 0x28, 0x01, 0x12, 0x01, 0x00, 0x00, 0x36, 0x01, 0x13, 0x01, 0x00, 0x00, 0x36, 0x01, 0x14, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x73, 0x00, 0x00, 0x00, 0x01, 0x01, 0x6C, 0x04, 0x00, 0x00, 0x01, 0x01, 0x72, 0x04, 0x00, 0x00, 0x01, 0x01, 0xD5, 0x04, 0x00, 0x00, 0x01, 0x01, 0xF7, 0x04, 0x00, 0x00, 0x01, 0x01, 0xF9, 0x04, 0x00, 0x00, 0x01, 0x01, 0xFB, 0x04, 0x00, 0x00, 0x01, 0x01, 0x06, 0x05, 0x00, 0x00, 0x01, 0x01, 0x39, 0x05, 0x00, 0x00, 0x01, 0x01, 0x3C, 0x05, 0x00, 0x00, 0x01, 0x01, 0x46, 0x05, 0x00, 0x00, 0x01, 0x01, 0x48, 0x05, 0x00, 0x00, 0x01, 0x01, 0x52, 0x05, 0x00, 0x00, 0x01, 0x01, 0x61, 0x05, 0x00, 0x00, 0x01, 0x01, 0x69, 0x05, 0x00, 0x00, 0x01, 0x01, 0x6D, 0x05, 0x00, 0x00, 0x01, 0x01, 0x8E, 0x05, 0x00, 0x00, 0x01, 0x01, 0x96, 0x05, 0x00, 0x00, 0x01, 0x01, 0xB4, 0x05, 0x00, 0x00, 0x01, 0x01, 0xBE, 0x05, 0x00, 0x00, 0x01, 0x01, 0xDF, 0x05, 0x00, 0x00, 0x01, 0x01, 0xA1, 0x1F, 0x00, 0x00, 0x01, 0x01, 0xA2, 0x1F, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0xCD, 0xFB, 0x15, 0x87, 0x5C, 0x2E, 0xB5, 0x8E, 0x44, 0x60, 0x49, 0x74, 0x43, 0xE4, 0xFA, 0x28, 0x43, 0x4A, 0xA2, 0x00, 0x01, 0x00, 0x4A, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x19, 0x42, 0x01, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x07, 0x00, 0x46, 0x72, 0x65, 0x65, 0x7A, 0x33, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x57, 0x1B, 0xE1, 0x09, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xC7, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
                0x90, 0x9D, 0x53, 0x40, 0x73, 0x07, 0x00, 0x00, 0x00, 0x57, 0x57, 0xD2, 0xF1, 0xEA, 0x04, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0xD4, 0xB5, 0x2A, 0x03, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x15, 0x0E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x2A, 0x00, 0x00, 0xE3, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x12, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x13, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x12, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x13, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x28, 0x13, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x70, 0x13, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x0F, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x10, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x16, 0x00, 0x00, 0x07, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x16, 0x00, 0x00, 0x07, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x88, 0x16, 0x00, 0x00, 0x07, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x88, 0x16, 0x00, 0x00, 0x07, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x28, 0x00, 0x00, 0x0B, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x97, 0x00, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x81, 0x5F, 0x00, 0x00, 0x0A, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x5F, 0x00, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xE6, 0x03, 0x14, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x5F, 0x00, 0x00, 0x1E, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x8B, 0x00, 0x00, 0x09, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x56, 0x60, 0x00, 0x00, 0x02, 0x45, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x7E, 0x03, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xA4, 0x00, 0x00, 0x0A, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x5F, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x0E, 0x00, 0x00, 0x1D, 0x00, 0x05, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x53, 0x08, 0x80, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, 0x28, 0x01, 0x12, 0x01, 0x00, 0x00, 0x57, 0x01, 0x13, 0x01, 0x00, 0x00, 0x57, 0x01, 0x14, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x6C, 0x04, 0x00, 0x00, 0x01, 0x01, 0x72, 0x04, 0x00, 0x00, 0x01, 0x01, 0xD5, 0x04, 0x00, 0x00, 0x01, 0x01, 0xF7, 0x04, 0x00, 0x00, 0x01, 0x01, 0xF9, 0x04, 0x00, 0x00, 0x01, 0x01, 0xFB, 0x04, 0x00, 0x00, 0x01, 0x01, 0x06, 0x05, 0x00, 0x00, 0x01, 0x01, 0x1C, 0x05, 0x00, 0x00, 0x01, 0x01, 0x39, 0x05, 0x00, 0x00, 0x01, 0x01, 0x3E, 0x05, 0x00, 0x00, 0x01, 0x01, 0x46, 0x05, 0x00, 0x00, 0x01, 0x01, 0x4E, 0x05, 0x00, 0x00, 0x01, 0x01, 0x55, 0x05, 0x00, 0x00, 0x01, 0x01, 0x61, 0x05, 0x00, 0x00, 0x01, 0x01, 0x69, 0x05, 0x00, 0x00, 0x01, 0x01, 0x71, 0x05, 0x00, 0x00, 0x01, 0x01, 0x8E, 0x05, 0x00, 0x00, 0x01, 0x01, 0x96, 0x05, 0x00, 0x00, 0x01, 0x01, 0x9E, 0x05, 0x00, 0x00, 0x01, 0x01, 0xB9, 0x05, 0x00, 0x00, 0x01, 0x01, 0xCA, 0x05, 0x00, 0x00, 0x01, 0x01, 0xD9, 0x05, 0x00, 0x00, 0x01, 0x01, 0xE2, 0x05, 0x00, 0x00, 0x01, 0x01, 0x50, 0x0D, 0x00, 0x00, 0x01, 0x01, 0x57, 0x0D, 0x00, 0x00, 0x01, 0x01, 0x63, 0x0D, 0x00, 0x00, 0x01, 0x01, 0xA1, 0x1F, 0x00, 0x00, 0x01, 0x01, 0xA2, 0x1F, 0x00, 0x00, 0x01, 0x01, 0xF0, 0x1F, 0x00, 0x00, 0x01, 0x01, 0x03, 0x20, 0x00, 0x00, 0x01, 0x01, 0x25, 0x20, 0x00, 0x00, 0x01, 0x01, 0x48, 0x20, 0x00, 0x00, 0x01, 0x01, 0x58, 0x20, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xF7, 0x43, 0x16, 0x87, 0x5C, 0x00, 0xE0, 0x9C, 0x44, 0x00, 0x00, 0x75, 0x43, 0x00, 0x00, 0xA6, 0x42, 0x06, 0x11, 0x00, 0x01, 0x00, 0x06, 0x11, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x19, 0x42, 0x01, 0x00, 0xF0, 0x42, 0x00, 0x00, 0xC8, 0x42, 0x00, 0x07, 0x00, 0x46, 0x72, 0x65, 0x65, 0x7A, 0x33, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x57, 0x1B, 0xE1, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xC7, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00
            };

            CurBot = SROServer.Server.Available.Last().GetBots().First();

            //using (var packet = new BinaryReader(new MemoryStream(chardata.ToArray())))
            {
                var packet = new Packet(0x3013);
                packet.WriteUInt8Array(chardata);
                packet.Lock();

                CurBot.handleChardata(packet);
            }
        }

        private void guiBtn_trainingChooseTrainplace_Click(object sender, RoutedEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.InitialDirectory = System.IO.Path.Combine(ExecutingPath, "scripts");
            if (dlg.ShowDialog() == true)
            {
                bot.Config.TrainPlace.WalkingScript = System.IO.Path.GetFileName(dlg.FileName);
            }
        }

        private void guiListbox_partyMembers_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var bot = guiTabItemBotSettings.DataContext as SROBot.Bot;
            if (bot == null) return;

            var lbox = sender as ListBox;
            if (lbox == null) return;

            var member = lbox.SelectedItem as string;
            if (string.IsNullOrEmpty(member)) return;
            if (!bot.Config.Party.Members.Any(m => m.Equals(member, StringComparison.OrdinalIgnoreCase))) return;

            bot.Config.Party.Members.Remove(bot.Config.Party.Members.First(m => m.Equals(member, StringComparison.OrdinalIgnoreCase)));
        }
    }
}
